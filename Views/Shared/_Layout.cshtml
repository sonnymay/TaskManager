<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="utf-8" />
   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
   <title>@ViewData["Title"] - TaskManager</title>
   <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
   <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
   <link rel="stylesheet" href="~/TaskManager.styles.css" asp-append-version="true" />
</head>
<body>
   <header>
       <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
           <div class="container-fluid">
               <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">TaskManager</a>
               <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                       aria-expanded="false" aria-label="Toggle navigation">
                   <span class="navbar-toggler-icon"></span>
               </button>
               <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                   <ul class="navbar-nav flex-grow-1">
                       <li class="nav-item">
                           <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                       </li>
                       <li class="nav-item">
                           <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
                       </li>
                       <li class="nav-item">
                           <a class="nav-link text-dark" asp-area="" asp-controller="Tasks" asp-action="Index">Tasks</a>
                       </li>
                   </ul>
                   <partial name="_LoginPartial" />
               </div>
           </div>
       </nav>
   </header>

   <div class="info-bar bg-light py-2">
       <div class="container d-flex justify-content-between align-items-center">
           <div id="clock" class="text-dark"></div>
           <div id="location-weather" class="d-flex align-items-center">
               <div id="location" class="me-3"></div>
               <div id="weather"></div>
           </div>
       </div>
   </div>

   <div class="container">
       <main role="main" class="pb-3">
           @RenderBody()
       </main>
   </div>

   <footer class="border-top footer text-muted">
       <div class="container">
           &copy; 2024 - TaskManager - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
       </div>
   </footer>
   <script src="~/lib/jquery/dist/jquery.min.js"></script>
   <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
   <script src="~/js/site.js" asp-append-version="true"></script>
   <script>
       // Update clock
       function updateClock() {
           const now = new Date();
           const timeString = now.toLocaleTimeString();
           document.getElementById('clock').textContent = timeString;
       }

       // Update clock every second
       setInterval(updateClock, 1000);
       updateClock(); // Initial call

       // Set loading states
       document.getElementById('location').textContent = "Loading location...";
       document.getElementById('weather').textContent = "Loading weather...";

       // Get location and weather
       if (navigator.geolocation) {
           navigator.geolocation.getCurrentPosition(
               position => {
                   const latitude = position.coords.latitude;
                   const longitude = position.coords.longitude;

                   // Get location name using reverse geocoding
                   fetch(`https://api.openweathermap.org/geo/1.0/reverse?lat=${latitude}&lon=${longitude}&limit=1&appid=4dbf9169dc66bc5579cb826685cbd2d7`)
                       .then(response => response.json())
                       .then(data => {
                           const city = data[0].name;
                           const state = data[0].state;
                           document.getElementById('location').textContent = `📍 ${city}, ${state}`;
                       });

                   // Get weather
                   fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=imperial&appid=4dbf9169dc66bc5579cb826685cbd2d7`)
                       .then(response => response.json())
                       .then(data => {
                           const temp = Math.round(data.main.temp);
                           const feelsLike = Math.round(data.main.feels_like);
                           const humidity = data.main.humidity;
                           const windSpeed = Math.round(data.wind.speed);
                           const description = data.weather[0].description;
                           const icon = data.weather[0].icon;
                           
                           document.getElementById('weather').innerHTML = `
                               <div class="d-flex align-items-center">
                                   <img src="https://openweathermap.org/img/wn/${icon}.png" alt="Weather icon" class="weather-icon me-2">
                                   <div>
                                       <span class="temp">${temp}°F</span>
                                       <span class="description">${description}</span>
                                       <div class="weather-details">
                                           <small>Feels like: ${feelsLike}°F | Humidity: ${humidity}% | Wind: ${windSpeed} mph</small>
                                       </div>
                                   </div>
                               </div>
                           `;
                       });
               },
               error => {
                   document.getElementById('location').textContent = "Location unavailable";
                   document.getElementById('weather').textContent = "Weather unavailable";
               }
           );
       }
   </script>
   @await RenderSectionAsync("Scripts", required: false)
</body>
</html>